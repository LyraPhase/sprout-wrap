#!/usr/bin/env bash
REPO_BASE="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

set -e

function check_sprout_locked_ruby_versions() {
  # Check locked versions
  sprout_ruby_version=$(cat "${REPO_BASE}/.ruby-version" | tr -d '\n')
  sprout_ruby_gemset=$(cat "${REPO_BASE}/.ruby-gemset" | tr -d '\n')
  sprout_rubygems_ver=$(cat "${REPO_BASE}/.rubygems-version" | tr -d '\n') ## Passed to gem update --system
  sprout_bundler_ver=$(grep -A 1 "BUNDLED WITH" Gemfile.lock | tail -n 1 | tr -d '[:blank:]')
}

function load_rvm() {
  if ! type rvm 2>&1 | grep -q 'rvm is a function' ; then
    # Add RVM to PATH for scripting. Make sure this is the last PATH variable change.
    export PATH="$PATH:$HOME/.rvm/bin"

    [[ -s "$HOME/.rvm/scripts/rvm" ]] && source "$HOME/.rvm/scripts/rvm" # Load RVM into a shell session *as a function*
  fi
}

function use_local_gems() {
  SPROUT_HOME="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
  export SPROUT_HOME

  current_ruby=$(which ruby)

  if [[ -s "$HOME/.rvm/scripts/rvm" ]]; then
    load_rvm
    current_rvm_ruby=$(rvm current 2>/dev/null)

    check_sprout_locked_ruby_versions
    if [[ "$current_rvm_ruby" != "ruby-${sprout_ruby_version}@${sprout_ruby_gemset}" ]]; then
      echo -e "\033[33mWarning: current ruby '${current_ruby}' is not the same as locked .ruby-version@.ruby-gemset = 'ruby-${sprout_ruby_version}@${sprout_ruby_gemset}' \033[0m"
      if rvm list rubies 2>/dev/null | grep -q "ruby-${sprout_ruby_version}" ; then
        echo -e "\033[93mWarning: Changing RVM ruby to 'ruby-${sprout_ruby_version}@${sprout_ruby_gemset}' \033[0m"
        rvm use ruby-${sprout_ruby_version}@${sprout_ruby_gemset} --create
      else
        echo -e "\033[31mError: Currently supported ruby-${sprout_ruby_version}@${sprout_ruby_gemset} not found!\033[0m"
        echo -e "\033[96mInfo: Did you forget to run ./bootstrap-scripts/bootstrap.sh  ?!\033[0m"
        echo -e "\033[31mError: Could not find a supported version of ruby; Exiting...\033[0m"
        exit 1
      fi
    fi
  elif [ "${current_ruby}" == '/usr/bin/ruby' ]; then
    echo -e "\033[31mWarning: sprout should NO LONGER be run with system ruby; using '${current_ruby}'\033[0m"
    echo -e "\033[31mWarning: Please review https://dontusesystemruby.com/ \033[0m"
    echo ""
    echo -e "\033[31mWarning: Continuing onwards... yet here be dragons! I assume you know what youre doing?\033[0m"

    export GEM_HOME="${SPROUT_HOME}/tmp/ruby/2.0.0"
    export GEM_PATH="${GEM_HOME}"
    export PATH="${GEM_HOME}/bin:/usr/local/bin:/usr/bin:/bin:/usr/local/sbin:/usr/sbin:/sbin"
  else
    echo -e "\033[31mWarning: Could not find a supported version of ruby; Exiting...\033[0m"
    echo -e "\033[96mInfo: Did you forget to run ./bootstrap-scripts/bootstrap.sh  ?!\033[0m"
    exit 1
  fi
  echo "# - Using $(${current_ruby} -v)"
}

function ensure_in_sprout_home() {
  if [ "${SPROUT_HOME}" != "$(pwd)" ]; then
    echo "\033[91mError: sprout must be run from ${SPROUT_HOME}\033[0m"
    exit 1
  fi
}

function bundle_exec() {
  if bundler_installed; then
    echo "# - Using $(bundle -v)"
  else
    gem install bundler --no-document
  fi

  if bundle check > /dev/null 2>&1; then
    echo '# - Gemfile dependencies satisfied'
  else
    bundle install --jobs 6
  fi

  bundle exec "${@}"
}

function bundler_installed() {
  command -v bundle > /dev/null
}

function update_resources() {
  gem install bundler --no-document
  bundle update
  bundle exec librarian-chef update
}

function main() {
  use_local_gems
  ensure_in_sprout_home

  case "${1}" in
    '')
      export LOG_LEVEL="warn" # make chef less noisy
      bundle_exec soloist
      ;;
    exec)
      shift
      bundle_exec "${@}"
      ;;
    update)
      update_resources
      ;;
    *)
      echo "Usage:"
      echo "  sprout               - install dependencies and run 'soloist'"
      echo "  sprout exec some cmd - run 'some cmd' in this cookbooks's bundler context"
      echo "  sprout update:       - update gems and cookbook dependencies"
  esac
}

main "${@}"
